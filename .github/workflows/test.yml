name: Test

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  # Trigger on pull requests.
  pull_request:

  # Trigger on pushes to the mainline branches and version tags. This prevents building commits
  # twice when the pull request source branch is in the same repository.
  push:
    branches:
      - "master"
      - "maint"
      - "github-actions"

  # Trigger on request.
  workflow_dispatch:

env:
  # prevent deadlocked MPI tests from causing the job to cancel
  MPIEXEC_TIMEOUT: 3000
  # allow mpirun to execute as root in the tests
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

# Use multiple jobs to reduce the amount of time spent on GPU runners. Use GitHub Hosted runners
# for compiling all tests configurations (GPU and CPU), then upload the installation directory
# as an artifact. Test jobs depend on the build job, download the install directory, and run the
# tests. Upload each build configuration to a separate artifact.

# Github Actions does not support any form of templating at this time, not even YAML anchors.
# To minimize the number of duplicated lines, encode the job configuration as an array in config:
# [image, (mpi), (tbb)]
jobs:
  build:
    name: Build [${{ join(matrix.config, '_') }}]
    runs-on: ubuntu-latest
    container:
      image: glotzerlab/ci:2021.05-${{ matrix.config[0] }}
    strategy:
      matrix:
        include:
          # specify runner here even though it is not needed for the build, so that these lines
          # can be copied and pasted to the other jobs
          - {config: [clang11_py39, mpi], runner: ubuntu-latest}
          - {config: [cuda11_gcc9_py38], runner: [self-hosted,GPU], docker_options: "--gpus=all -e CUDA_VISIBLE_DEVICES"}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          path: code
          submodules: true
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake ../code -GNinja \
                        -DCMAKE_BUILD_TYPE=Release \
                        -DENABLE_GPU=${ENABLE_GPU:-"OFF"} \
                        -DENABLE_MPI=${ENABLE_MPI:-"OFF"} \
                        -DENABLE_TBB=${ENABLE_TBB:-"OFF"} \
                        -DBUILD_JIT=${BUILD_JIT:-"OFF"} \
                        -DTEST_CPU_IN_GPU_BUILDS=off \
                        -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install
        env:
          ENABLE_GPU: ${{ contains(matrix.config[0], 'cuda') }}
          ENABLE_MPI: ${{ contains(matrix.config, 'mpi') }}
          ENABLE_TBB: ${{ contains(matrix.config, 'tbb') }}
          BUILD_JIT: ${{ contains(matrix.config, 'jit') }}
      - name: Build
        run: ninja install
        working-directory: build
      - name: Remove object files
        run: find build -type f -name '*.o' -delete
      # Tar the build directory to preserve permissions and reduce HTTP requests on upload.
      - name: 'Tar build'
        run: tar -cvf build.tar build
      # Upload the tarball. Retain the file for a limited time in case developers need to download
      # and run tests locally for further debugging.
      - name: 'Upload build'
        uses: actions/upload-artifact@v2.2.3
        with:
          name: build-${{ join(matrix.config, '_') }}
          path: build.tar
          retention-days: 7

  pytest:
    name: Run pytest [${{ join(matrix.config, '_') }}]
    needs: build
    runs-on: ${{ matrix.runner }}
    container:
      image: glotzerlab/ci:2021.05-${{ matrix.config[0] }}
      options: ${{ matrix.docker_options }} -e CUDA_VISIBLE_DEVICES
    strategy:
      matrix:
        include:
          - {config: [clang11_py39, mpi], runner: ubuntu-latest}
          - {config: [cuda11_gcc9_py38], runner: [self-hosted,GPU], docker_options: "--gpus=all"}
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: build-${{ join(matrix.config, '_') }}
      - name: Untar build
        run: tar -xvf build.tar
      - name: Run tests
        run: python3 -m pytest --pyargs hoomd -v --log-level=DEBUG --durations=0
        env:
          PYTHONPATH: ${{ github.workspace }}/build

  ctest:
    name: Run ctest [${{ join(matrix.config, '_') }}]
    needs: build
    runs-on: ${{ matrix.runner }}
    container:
      image: glotzerlab/ci:2021.05-${{ matrix.config[0] }}
      options: ${{ matrix.docker_options }} -e CUDA_VISIBLE_DEVICES
    strategy:
      matrix:
        include:
          - {config: [clang11_py39, mpi], runner: ubuntu-latest}
          - {config: [cuda11_gcc9_py38], runner: [self-hosted,GPU], docker_options: "--gpus=all"}
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: build-${{ join(matrix.config, '_') }}
      - name: Untar build
        run: tar -xvf build.tar
      - name: Run tests
        run: >-
          ctest
          -T test
          --output-on-failure
          --test-output-size-failed 1048576
          --test-output-size-passed 1048576
        working-directory: build
        env:
          PYTHONPATH: ${{ github.workspace }}/build
          # allow openmpi to oversubscribe cores
          OMPI_MCA_rmaps_base_oversubscribe: 1
          # prevent errors from mis-configured openib systems
          OMPI_MCA_btl: "vader,self"

  # This job is used to provide a single requirement for branch merge conditions.
  tests_complete:
    name: Unit test
    needs: [pytest, ctest]
    runs-on: ubuntu-latest

    steps:
      - run: echo "Done!"
